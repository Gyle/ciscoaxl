def remove_voice_mail_pilot(self, **args):
    """
    remove_voice_mail_pilot parameters
    :param uuid: uuid
    :param dirn: dirn
    :param cssName: cssName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeVoiceMailPilot(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_dhcp_subnet(self, **args):
    """
    remove_dhcp_subnet parameters
    :param uuid: uuid
    :param dhcpServerName: dhcpServerName
    :param subnetIpAddress: subnetIpAddress
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeDhcpSubnet(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_call_park(self, **args):
    """
    remove_call_park parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeCallPark(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_directed_call_park(self, **args):
    """
    remove_directed_call_park parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeDirectedCallPark(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_meet_me(self, **args):
    """
    remove_meet_me parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeMeetMe(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_conference_now(self, **args):
    """
    remove_conference_now parameters
    :param uuid: uuid
    :param conferenceNowNumber: conferenceNowNumber
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeConferenceNow(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_phone_ntp(self, **args):
    """
    remove_phone_ntp parameters
    :param uuid: uuid
    :param ipAddress: ipAddress
    :param ipv6Address: ipv6Address
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removePhoneNtp(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_message_waiting(self, **args):
    """
    remove_message_waiting parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeMessageWaiting(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_trans_pattern(self, **args):
    """
    remove_trans_pattern parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :param dialPlanName: dialPlanName
    :param routeFilterName: routeFilterName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeTransPattern(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_calling_party_transformation_pattern(self, **args):
    """
    remove_calling_party_transformation_pattern parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :param dialPlanName: dialPlanName
    :param routeFilterName: routeFilterName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeCallingPartyTransformationPattern(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_sip_route_pattern(self, **args):
    """
    remove_sip_route_pattern parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeSipRoutePattern(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_hunt_pilot(self, **args):
    """
    remove_hunt_pilot parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeHuntPilot(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_route_pattern(self, **args):
    """
    remove_route_pattern parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :param dialPlanName: dialPlanName
    :param routeFilterName: routeFilterName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeRoutePattern(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_line(self, **args):
    """
    remove_line parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeLine(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_call_pickup_group(self, **args):
    """
    remove_call_pickup_group parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeCallPickupGroup(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_called_party_transformation_pattern(self, **args):
    """
    remove_called_party_transformation_pattern parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :param dialPlanName: dialPlanName
    :param routeFilterName: routeFilterName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeCalledPartyTransformationPattern(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_saf_ccd_purge_block_learned_routes(self, **args):
    """
    remove_saf_ccd_purge_block_learned_routes parameters
    :param uuid: uuid
    :param learnedPattern: learnedPattern
    :param learnedPatternPrefix: learnedPatternPrefix
    :param callControlIdentity: callControlIdentity
    :param ipAddress: ipAddress
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeSafCcdPurgeBlockLearnedRoutes(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_enterprise_feature_access_configuration(self, **args):
    """
    remove_enterprise_feature_access_configuration parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeEnterpriseFeatureAccessConfiguration(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_handoff_configuration(self, **args):
    """
    remove_handoff_configuration parameters
    :param uuid: uuid
    :param pattern: pattern
    :param routePartitionName: routePartitionName
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeHandoffConfiguration(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result
    
def remove_ldap_sync_custom_field(self, **args):
    """
    remove_ldap_sync_custom_field parameters
    :param uuid: uuid
    :param ldapConfigurationName: ldapConfigurationName
    :param customUserField: customUserField
    :return: result dictionary
    """
    result = {
        'success': False,
        'response': '',
        'error': '',
    }
    try:
        resp = self.client.removeLdapSyncCustomField(**args)

        if resp['return']:
            result['success'] = True
            result['response'] = resp['return']
        return result

    except Fault as error:
        result['error'] = error
        return result